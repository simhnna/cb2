/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MINIGrammar)
package parser;
import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import components.*;
import components.types.*;
import components.helpers.Position;
import ir.Type;
import components.interfaces.*;
import java.util.ArrayList;
import testsuite.MINIException;
import frontend.MINIParser;

@SuppressWarnings("unused")
public class MINIGrammar
{
  private static File currentFile;
  private static HashMap<String, String> tokenTable = new HashMap<String, String>();
  private static Position generatePosition(Token t) {
	Position p = new Position(currentFile, t.beginLine);
	return p;
  }
  private static String tokenify(Token t) {
	String token = tokenTable.get(t.image);
	if (token == null) {
	  token = t.image;
	  tokenTable.put(token, token);
	}
	return token;
  }
  public static FileNode parse(File in) throws MINIException
  {
    currentFile = in;
    CompositeType.clear();
    try
    {
      MINIGrammar parser = new MINIGrammar(new FileInputStream(in));
      return parser.file();
    }
    catch (FileNotFoundException e)
    {
      e.printStackTrace();
      return null;
    }
    catch (ParseException e)
    {
      MINIParser.handleParseError(in, e.currentToken, e.tokenImage, e.expectedTokenSequences);
      return null;
    }
    catch (TokenMgrError e) {
		MINIParser.handleTokenMgrError(in, e);
		return null;
    }
  }
}

PARSER_END(MINIGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

< IN_SINGLE_LINE_COMMENT >
SPECIAL_TOKEN :
{
    < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

< DEFAULT >
TOKEN : /* Reserved keywords and such */
{
  < CLASS : "class" >
| < BRACE_OPEN : "{" >
| < BRACE_CLOSE : "}" >
| < PARAN_OPEN : "(" >
| < PARAN_CLOSE : ")" >
| < ARRAY_BEGIN: "[" >
| < ARRAY_END: "]" >
| < THIS : "this" >
| < DOT : "." >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < NULL : "null" >
| < NEW : "new" >
| < RETURN : "return" >
| < VAR : "var" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < ASSIGNMENT : ":=" >
| < MINUS : "-" >
| < NEGATION : "!" >
| < PLUS : "+" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REMAINDER : "%" >
| < EQUAL : "==" >
| < NOTEQUAL : "!=" >
| < LESS_THAN_EQUAL : "<=" >
| < GREATER_THAN_EQUAL : ">=" >
| < LESS_THAN : "<" >
| < GREATER_THAN : ">" >
| < AND : "&&" >
| < OR : "||" >
| < BOOL :
    (
      "true"
    | "false"
    ) >
| < ID : ([ "a"-"z", "A"-"Z" ])+ >
| < INT : ([ "0"-"9" ]) { 1,8 } >
| < STRING :
    "\""
    (
      " "
    | "!"
    | [ "#"-"~" ]
    )*
    "\"" >
| < BAD_TOKEN : ~[ ] >
}

FileNode file() :
{
  FileNode f = new FileNode();
  ClassNode cls;
}
{
  (
    cls = mini_class()
    {
      f.classes.add(cls);
    }
  )*
  < EOF >
  {
    return f;
  }
}

ClassNode mini_class() :
{
  ClassNode cls;
  MemberNode classMember;
}
{
  < CLASS >
  < ID > { cls = new ClassNode(tokenify(token), generatePosition(token)); }
  < BRACE_OPEN >
  (
    classMember = classMember()
    {
      cls.addChild(classMember);
    }
  )*
  < BRACE_CLOSE >
  {
    return cls;
  }
}

MemberNode classMember() :
{
  MethodDeclarationNode m;
  Token memberName;
  TypeNode type;
}
{
  type = type() memberName = < ID >
  (
    < SEMICOLON >
    {
      return new FieldNode(tokenify(memberName), type, generatePosition(memberName));
    }
  | m = method(memberName, type)
  {
      return m;
    }
  )
}


MethodDeclarationNode method(Token name, TypeNode type) :
{
  BlockNode body;
  ArrayList<NamedType> arguments;
}
{
  arguments = signature() body = blockStatement()
  {
    return new MethodDeclarationNode(tokenify(name), type, arguments, body, generatePosition(name));
  }
}

TypeNode type() :
{
  Token type;
  int dimensions = 0;
}
{
  type = < ID > (< ARRAY_BEGIN > < ARRAY_END > { dimensions++; })*
  {
    return new TypeNode(tokenify(type), dimensions, generatePosition(type));
  }
}

ArrayList < NamedType > signature() :
{
  ArrayList < NamedType > arguments = new ArrayList < NamedType > ();
  TypeNode type;
}
{
  < PARAN_OPEN >
  (
    type = type()
    < ID >
	{
      arguments.add(new NamedType(tokenify(token), type, generatePosition(token)));
    }
    (
      < COMMA >
      type = type()
      < ID >
      {
        arguments.add(new NamedType(tokenify(token), type, generatePosition(token)));
      }
    )*
 
  )?
  < PARAN_CLOSE >
  {
    return arguments;
  }
}

StatementNode statement() :
{
  StatementNode s = null;
}
{
  (
    s = blockStatement()
  | s = ifStatement()
  | s = whileStatement()
  | s = returnStatement()
  | s = simpleStatement()
  | s = declaration()
  )
  {
    return s;
  }
}

StatementNode simpleStatement() :
{
  ExpressionNode first, second;
  Token position;
}
{
  first = expression7()
  (
    position=< SEMICOLON > { return new SimpleStatementNode(generatePosition(position), first); }
    | position=< ASSIGNMENT > second = expression7() < SEMICOLON > {  return new AssignmentStatementNode(first, generatePosition(position), second); }
  )
}

DeclarationStatementNode declaration() :
{
  Token name;
  ExpressionNode expression;
}
{
  < VAR >
  < ID > { name = token; }
  < ASSIGNMENT >
  expression = expression7()
  < SEMICOLON >
  {
    return new DeclarationStatementNode(tokenify(name), expression, generatePosition(name));
  }
}

BlockNode blockStatement() :
{
  BlockNode block;
  StatementNode statement;
}
{
  < BRACE_OPEN > { block = new BlockNode(generatePosition(token)); }
  (
    statement=statement()
    {
      block.children.add(statement);
    }
  )*
  < BRACE_CLOSE >
  {
    return block;
  }
}

IfNode ifStatement() :
{
  ExpressionNode condition;
  BlockNode first, second = null;
  Token position;
}
{
  position=< IF > < PARAN_OPEN > condition = expression7()
  < PARAN_CLOSE > first = blockStatement()
  (
    < ELSE > second = blockStatement()
  )?
  {
    return new IfNode(generatePosition(position), condition, first, second);
  }
}

WhileNode whileStatement() :
{
  ExpressionNode condition;
  BlockNode body;
  Token position;
}
{
  position=< WHILE > < PARAN_OPEN > condition = expression7()
  < PARAN_CLOSE > body = blockStatement()
  {
    return new WhileNode(generatePosition(position), condition, body);
  }
}

ReturnNode returnStatement() :
{
  ExpressionNode returnValue;
  Token position;
}
{
  position=< RETURN > returnValue = expression7() < SEMICOLON >
  {
    return new ReturnNode(generatePosition(position), returnValue);
  }
}

ExpressionNode expression7 () :
//logical or
{
  ExpressionNode current;
  ExpressionNode next;
  Token position;
  BinaryExpressionNode.Operator operator;
}
{
  current=expression6()
  (
    position=< OR > { operator = BinaryExpressionNode.Operator.OR; }
    next = expression6() { current = new BinaryExpressionNode(generatePosition(position), current, next, operator); }
  )*
  {
    return current;
  }
}

ExpressionNode expression6 () :
//logical and
{
  ExpressionNode current;
  ExpressionNode next;
  Token position;
  BinaryExpressionNode.Operator operator;
}
{
  current= expression5()
  (
    position=< AND > { operator = BinaryExpressionNode.Operator.AND; }
    next = expression5() { current = new BinaryExpressionNode(generatePosition(position), current, next, operator); }
  )*
  {
    return current;
  }
}

ExpressionNode expression5 () :
//equality
{
  ExpressionNode current;
  ExpressionNode next;
  Token position;
  BinaryExpressionNode.Operator operator;
}
{
  current=expression4()
  (
    (
      position=< EQUAL > { operator = BinaryExpressionNode.Operator.SAME; }
    | position=< NOTEQUAL > { operator = BinaryExpressionNode.Operator.NOTSAME; }
    )
    next = expression4()
    { current= new BinaryExpressionNode(generatePosition(position), current, next, operator); }
  )*
  {
    return current;
  }
}

ExpressionNode expression4 () :
//relational
{
  ExpressionNode current;
  ExpressionNode next;
  Token position;
  BinaryExpressionNode.Operator operator;
}
{
  current=expression3()
  (
    (
      position=< LESS_THAN_EQUAL > { operator = BinaryExpressionNode.Operator.LTE; }
    | position=< GREATER_THAN_EQUAL > { operator = BinaryExpressionNode.Operator.GTE; }
    | position=< LESS_THAN > { operator = BinaryExpressionNode.Operator.LT; }
    | position=< GREATER_THAN > { operator = BinaryExpressionNode.Operator.GT; }
  	)
  	next=expression3()
  	{ current = new BinaryExpressionNode(generatePosition(position), current, next, operator); }
  )*
  {
    return current;
  }
}

ExpressionNode expression3 () :
//addition
{
  ExpressionNode current;
  ExpressionNode next;
  Token position;
  BinaryExpressionNode.Operator operator;
}
{
  current=expression2()(
    (
      position=< PLUS > { operator = BinaryExpressionNode.Operator.PLUS; }
    | position=< MINUS > { operator = BinaryExpressionNode.Operator.SUB; }
  	)
  	next=expression2()
  	{ current = new BinaryExpressionNode(generatePosition(position), current, next, operator); }
  )*
  {
    return current;
  }
}

ExpressionNode expression2 () :
//multiplicative
{
  ExpressionNode current;
  ExpressionNode next;
  Token position;
  BinaryExpressionNode.Operator operator;
}
{
  current=expression1()
  (
    (
      position=< MULTIPLY > { operator = BinaryExpressionNode.Operator.MUL; }
    | position=< DIVIDE > { operator = BinaryExpressionNode.Operator.DIV; }
    | position=< REMAINDER > { operator = BinaryExpressionNode.Operator.MOD; }
 	)
  	next=expression1()
  	{ current = new BinaryExpressionNode(generatePosition(position), current, next, operator); }
  )*
  {
    return current;
  }
}

ExpressionNode expression1 () :
//unary
{
  ExpressionNode current;
  Token position;
  UnaryExpressionNode.Operator operator;
}
{
  (    
    (
      (
        position=< NEGATION > { operator = UnaryExpressionNode.Operator.NEGATION; }
      | position=< MINUS > { operator = UnaryExpressionNode.Operator.MINUS; }
      )
      current = expression1()
      { current = new UnaryExpressionNode(generatePosition(position), current, operator); }
    )
    | current = expression0()
  )
  {
    return current;
  }
}

ExpressionNode expression0 () :
//atomic (+ member)
{
  ExpressionNode base = null;
  ExpressionNode current;
  ArrayList<ExpressionNode> arguments = null;
  Token name;
}
{
  current = atomicExpression()
  (
    < DOT > name=< ID >(arguments=argumentList())?
    {
	  if (arguments != null) {
		current = new MethodInvocationExpressionNode(current, tokenify(name), arguments, generatePosition(name));
		arguments = null;
	  } else {
		current = new FieldMemberExpressionNode(current, tokenify(name), generatePosition(name));
	  }
    }
  )*
  {
    return current;
  }
}

ArrayList<ExpressionNode> argumentList() :
{
  ArrayList<ExpressionNode> arguments = new ArrayList<ExpressionNode>();
  ExpressionNode expr;
}
{
  < PARAN_OPEN >
  (
    expr = expression7()
    {
      arguments.add(expr);
    }
    (
      < COMMA > expr = expression7()
      {
     	arguments.add(expr);
      }
    )*
  )?
  < PARAN_CLOSE >
  {
    return arguments;
  }
}

ExpressionNode atomicExpression() :
{
  ExpressionNode n;
  ExpressionNode expression;
  ArrayList<ExpressionNode> arguments = null;
  Token name;
}
{
  (
    name=< ID >
    ( arguments = argumentList())?
    {
      // baseObject is null because it doesn't exist here
      if(arguments == null){
        return new FieldMemberExpressionNode(null, tokenify(name), generatePosition(name));
	  }
	  return new MethodInvocationExpressionNode(null, tokenify(name), arguments, generatePosition(name));
    }
  | < THIS > { return new LiteralNode(tokenify(token), null, generatePosition(token)); }
  | < STRING > { return new LiteralNode(tokenify(token), StringType.INSTANCE, generatePosition(token)); }
  | < INT > { return new LiteralNode(tokenify(token), IntegerType.INSTANCE, generatePosition(token)); }
  | < BOOL > { return new LiteralNode(tokenify(token), BooleanType.INSTANCE, generatePosition(token)); }
  | n = nullExpression()
  | n = newExpression()
  | < PARAN_OPEN >
    expression = expression7()
    < PARAN_CLOSE > { expression.setParenthesis(); return expression; }
  )
{
  return n;
}
}

NullExpressionNode nullExpression() :
{
  TypeNode type;
}
{
  < NULL > < LESS_THAN > type = type() < GREATER_THAN >
  {
    return new NullExpressionNode(type);
  }
}

NewExpressionNode newExpression() :
{
  NewExpressionNode n;
  TypeNode type;
}
{
  < NEW > < LESS_THAN > type = type() { n = new NewExpressionNode(type); }
  (
    < COMMA >
    (
      < INT > { n.arguments.add(new LiteralNode(tokenify(token), IntegerType.INSTANCE, generatePosition(token))); }
    | < ID > { n.arguments.add(new FieldMemberExpressionNode(null, tokenify(token), generatePosition(token))); }
    )
  )*
  < GREATER_THAN >
  {
    return n;
  }
}
