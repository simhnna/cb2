/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MINIGrammar)
package parser;
import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import components.*;
import components.interfaces.*;
import java.util.ArrayList;
import testsuite.MINIException;
import errorHandling.ErrorHandler;

@SuppressWarnings("unused")
public class MINIGrammar
{
  public static ArrayList < ClassNode > parse(File in) throws MINIException
  {
    try
    {
      MINIGrammar parser = new MINIGrammar(new FileInputStream(in));
      return parser.file();
    }
    catch (FileNotFoundException e)
    {
      e.printStackTrace();
      return null;
    }
    catch (ParseException e)
    {
      ErrorHandler.handleParseError(in, e.currentToken, e.tokenImage, e.expectedTokenSequences);
      return null;
    }
    catch (TokenMgrError e) {
		ErrorHandler.handleTokenMgrError(in, e);
		return null;
    }
  }
}

PARSER_END(MINIGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

< IN_SINGLE_LINE_COMMENT >
SPECIAL_TOKEN :
{
    < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

< DEFAULT >
TOKEN : /* Reserved keywords and such */
{
  < CLASS : "class" >
| < BRACE_OPEN : "{" >
| < BRACE_CLOSE : "}" >
| < PARAN_OPEN : "(" >
| < PARAN_CLOSE : ")" >
| < ARRAY_DEF : "[]" >
| < THIS : "this" >
| < DOT : "." >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < NULL : "null" >
| < NEW : "new" >
| < RETURN : "return" >
| < VAR : "var" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < ASSIGNMENT : ":=" >
| < MINUS : "-" >
| < NEGATION : "!" >
| < PLUS : "+" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < REMAINDER : "%" >
| < EQUAL : "==" >
| < NOTEQUAL : "!=" >
| < LESS_THAN_EQUAL : "<=" >
| < GREATER_THAN_EQUAL : ">=" >
| < LESS_THAN : "<" >
| < GREATER_THAN : ">" >
| < AND : "&&" >
| < OR : "||" >
| < ID : ([ "a"-"z", "A"-"Z" ])+ >
| < INT : ([ "0"-"9" ]) { 1,8 } >
| < BOOL :
    (
      "true"
    | "false"
    ) >
| < STRING :
    "\""
    (
      " "
    | "!"
    | [ "#"-"~" ]
    )*
    "\"" >
| < BAD_TOKEN : ~[ ] >
}

ArrayList < ClassNode > file() :
{
  ArrayList < ClassNode > classes = new ArrayList < ClassNode > ();
  ClassNode cls;
}
{
  (
    cls = mini_class()
    {
      classes.add(cls);
    }
  )*
  < EOF >
  {
    return classes;
  }
}

ClassNode mini_class() :
{
  ClassNode cls;
  MemberNode classMember;
}
{
  < CLASS >
  < ID > { cls = new ClassNode(token); }
  < BRACE_OPEN >
  (
    classMember = classMember()
    {
      cls.children.add(classMember);
    }
  )*
  < BRACE_CLOSE >
  {
    return cls;
  }
}

MemberNode classMember() :
{
  MethodNode m;
  Token memberName;
  Type type;
}
{
  type = type() memberName = < ID >
  (
    < SEMICOLON >
    {
      return new FieldNode(memberName, type);
    }
  | m = method(memberName, type)
  {
      return m;
    }
  )
}


MethodNode method(Token name, Type type) :
{
  BlockNode body;
  ArrayList<NamedType> arguments;
}
{
  arguments = signature() body = blockStatement()
  {
    return new MethodNode(name, type, body);
  }
}

Type type() :
{
  Token type;
  int dimensions = 0;
}
{
  type = < ID > (< ARRAY_DEF > { dimensions++; })*
  {
    return new Type(type, dimensions);
  }
}

ArrayList < NamedType > signature() :
{
  ArrayList < NamedType > arguments = new ArrayList < NamedType > ();
  Type type;
}
{
  < PARAN_OPEN >
  (
    type = type()
    < ID >
	{
      arguments.add(new NamedType(token, type));
    }
    (
      < COMMA >
      type = type()
      < ID >
      {
        arguments.add(new NamedType(token, type));
      }
    )*
 
  )?
  < PARAN_CLOSE >
  {
    return arguments;
  }
}

StatementNode statement() :
{
  StatementNode s = null;
}
{
  (
    s = blockStatement()
  | s = ifStatement()
  | s = whileStatement()
  | s = returnStatement()
  | s = simpleStatement()
  | s = declaration()
  )
  {
    return s;
  }
}

StatementNode simpleStatement() :
{
  ExpressionNode first, second;
}
{
  first = expression7()
  (
    < SEMICOLON > { return new SimpleStatementNode(first); }
    | < ASSIGNMENT > second = expression7() < SEMICOLON > {  return new AssignmentStatementNode(first, second); }
  )
}

DeclarationStatementNode declaration() :
{
  Token name;
  ExpressionNode expression;
}
{
  < VAR >
  < ID > { name = token; }
  < ASSIGNMENT >
  expression = expression7()
  < SEMICOLON >
  {
    return new DeclarationStatementNode(name, expression);
  }
}

BlockNode blockStatement() :
{
  BlockNode block = new BlockNode();
  StatementNode statement;
}
{
  < BRACE_OPEN >
  (
    statement=statement()
    {
      block.children.add(statement);
    }
  )*
  < BRACE_CLOSE >
  {
    return block;
  }
}

IfNode ifStatement() :
{
  ExpressionNode condition;
  BlockNode first, second = null;
}
{
  < IF > < PARAN_OPEN > condition = expression7()
  < PARAN_CLOSE > first = blockStatement()
  (
    < ELSE > second = blockStatement()
  )?
  {
    return new IfNode(condition, first, second);
  }
}

WhileNode whileStatement() :
{
  ExpressionNode condition;
  BlockNode body;
}
{
  < WHILE > < PARAN_OPEN > condition = expression7()
  < PARAN_CLOSE > body = blockStatement()
  {
    return new WhileNode(condition, body);
  }
}

ReturnNode returnStatement() :
{
  ExpressionNode returnValue;
}
{
  < RETURN > returnValue = expression7() < SEMICOLON >
  {
    return new ReturnNode(returnValue);
  }
}

ExpressionNode expression7 () :
//logical or
{
  ExpressionNode current;
  ExpressionNode next;
}
{
  current=expression6() (< OR >next = expression6() { current = new OrBinaryExpressionNode(token, current, next); })*
  {
    return current;
  }
}

ExpressionNode expression6 () :
//logical and
{
  ExpressionNode current;
  ExpressionNode next;
}
{
  current= expression5()(< AND >next = expression5() { current = new AndBinaryExpressionNode(token,current,next); })*
  {
    return current;
  }
}

ExpressionNode expression5 () :
//equality
{
  ExpressionNode current;
  ExpressionNode next;
}
{
  current=expression4()(
    (< EQUAL > next = expression4() { current= new EqBinaryExpressionNode(token, current, next); })
    | (< NOTEQUAL > next = expression4() { current= new NeqBinaryExpressionNode(token, current, next); })
  )*
  {
    return current;
  }
}

ExpressionNode expression4 () :
//relational
{
  ExpressionNode current;
  ExpressionNode next;
}
{
  current=expression3()(
    (< LESS_THAN_EQUAL > next=expression3() { current = new LteBinaryExpressionNode(token, current, next); })
    | (< GREATER_THAN_EQUAL > next=expression3() { current = new GteBinaryExpressionNode(token, current, next); })
    | (< LESS_THAN > next=expression3() { current = new LtBinaryExpressionNode(token, current, next); })
    | (< GREATER_THAN > next=expression3() { current = new GtBinaryExpressionNode(token, current, next); })
  )*
  {
    return current;
  }
}

ExpressionNode expression3 () :
//addition
{
  ExpressionNode current;
  ExpressionNode next;
}
{
  current=expression2()(
    (< PLUS > next=expression2() { current = new PlusBinaryExpressionNode(token, current, next); })
    | (< MINUS > next=expression2() { current = new MinusBinaryExpressionNode(token, current, next); })
  )*
  {
    return current;
  }
}

ExpressionNode expression2 () :
//multiplicative
{
  ExpressionNode current;
  ExpressionNode next;
}
{
  current=expression1()(
    (< MULTIPLY > next=expression1() { current = new MultiplyBinaryExpressionNode(token, current, next); })
    | (< DIVIDE > next=expression1() { current = new DivideBinaryExpressionNode(token, current, next); })
    | (< REMAINDER > next=expression1() { current = new RemainderBinaryExpressionNode(token, current, next); })
  )*
  {
    return current;
  }
}

ExpressionNode expression1 () :
//unary
{
  ExpressionNode current;
}
{
  (    
    (
      (< NEGATION > current = expression1() { current = new NegationUnaryExpressionNode(token,current); })
      | (< MINUS > current = expression1() { current = new MinusUnaryExpressionNode(token, current); })
    )
    | current = expression0()
  )
  {
    return current;
  }
}

ExpressionNode expression0 () :
//atomic (+ member)
{
  ExpressionNode current;
}
{
  current = atomicExpression() (< DOT ><ID >(current=argumentList(token, current))?)*
  {
    return current;
  }
}


/*
ExpressionNode expression() :
{
  ExpressionNode n;
  UnaryExpressionNode unary;
}
{
  (
    unary = unaryOperator() unary.child = expression()
    {
      return unary;
    }
  | n = atomicExpression() (n = expression_suffix(n))?
  )
  {
    return n;
  }
}

ExpressionNode expression_suffix(ExpressionNode prefix) :
{
  BinaryExpressionNode b;
  MemberExpressionNode m = null;
}
{
    b=binaryOperator() b.second = expression()
	{
	  b.first = prefix;
	  b.balance();
	  return b;
	}
	| < DOT >
	  {
	    Token identifier;
	    ExpressionNode n=null;
	  }
	  identifier = < ID >
	  (m=argumentList(identifier))?
	  {
	    if(m == null){
	      m = new FieldMemberExpressionNode(identifier, prefix);
	    }
	  }
	  (n=expression_suffix(m))?
	  {
	    if(n != null)
	      return n;
	    return m;
	  }
}
UnaryExpressionNode unaryOperator() :
{}
{
  < MINUS > { return new MinusUnaryExpressionNode(token); }
| < NEGATION > { return new NegationUnaryExpressionNode(token); }
}

BinaryExpressionNode binaryOperator() :
{}
{
  < PLUS > { return new PlusBinaryExpressionNode(token); }
| < MINUS > { return new MinusBinaryExpressionNode(token); }
| < MULTIPLY > { return new MultiplyBinaryExpressionNode(token); }
| < DIVIDE > { return new DivideBinaryExpressionNode(token); }
| < REMAINDER > { return new RemainderBinaryExpressionNode(token); }
| < EQUAL > { return new EqBinaryExpressionNode(token); }
| < NOTEQUAL > { return new NeqBinaryExpressionNode(token); }
| < LESS_THAN_EQUAL > { return new LteBinaryExpressionNode(token); }
| < GREATER_THAN_EQUAL > { return new GteBinaryExpressionNode(token); }
| < LESS_THAN > { return new LtBinaryExpressionNode(token); }
| < GREATER_THAN > { return new GtBinaryExpressionNode(token); }
| < AND > { return new AndBinaryExpressionNode(token); }
| < OR > { return new OrBinaryExpressionNode(token); }
}
*/
MethodInvocationExpressionNode argumentList(Token name, ExpressionNode child) :
{
  MethodInvocationExpressionNode n = new MethodInvocationExpressionNode(name, child);
  ExpressionNode expr;
}
{
  < PARAN_OPEN >
  (
    expr = expression7()
    {
      n.children.add(expr);
    }
    (
      < COMMA > expr = expression7()
      {
        n.children.add(expr);
      }
    )*
  )?
  < PARAN_CLOSE >
  {
    return n;
  }
}

ExpressionNode atomicExpression() :
{
  ExpressionNode n;
  MemberExpressionNode m = null;
  Token identifier;
  ExpressionNode expression;
}
{
  (
    identifier = < ID >
    ( m = argumentList(identifier, null))?
    {
      if(m == null){
	    m = new FieldMemberExpressionNode(identifier, null);
	  }
	  return m;
    }
  | < THIS > { n = new ThisAtomicExpressionNode(token); }
  | < STRING > { n = new StringAtomicExpressionNode(token); }
  | < INT > { n = new IntAtomicExpressionNode(token); }
  | < BOOL > { n = new BoolAtomicExpressionNode(token); }
  | n = nullExpression()
  | n = newExpression()
  | < PARAN_OPEN >
    expression = expression7()
    < PARAN_CLOSE > { return new PriorityExpressionNode(expression); }
  )
{
  return n;
}
}

NullExpressionNode nullExpression() :
{
  Type type;
}
{
  < NULL > < LESS_THAN > type = type() < GREATER_THAN >
  {
    return new NullExpressionNode(type);
  }
}

NewExpressionNode newExpression() :
{
  NewExpressionNode n;
  Type type;
}
{
  < NEW > < LESS_THAN > type = type() { n = new NewExpressionNode(type); }
  (
    < COMMA >
    (
      < INT >
    | < ID >
    )
    {
      n.arguments.add(token);
    }
  )*
  < GREATER_THAN >
  {
    return n;
  }
}
