/* Generated By:JavaCC: Do not edit this line. MINIGrammar.java */
package grammar;

public class MINIGrammar implements MINIGrammarConstants {
  public static void main(String args []) throws ParseException {
    MINIGrammar parser = new MINIGrammar(System.in);
    MINIGrammar.file();
  }

  static final public void file() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      mini_class();
    }
  }

  static final public void mini_class() throws ParseException {
    jj_consume_token(25);
    jj_consume_token(ID);
    jj_consume_token(26);
    classMember();
    jj_consume_token(27);

  }

  static final public void classMember() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      field();
      break;
      method();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void field() throws ParseException {
    type();
    jj_consume_token(ID);
    jj_consume_token(28);
  }

  static final public void method() throws ParseException {
    type();
    jj_consume_token(ID);
    signature();
    blockStatement();
  }

  static final public void type() throws ParseException {
    jj_consume_token(ID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(29);
    }
  }

  static final public void signature() throws ParseException {
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      type();
      jj_consume_token(ID);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(31);
        type();
        jj_consume_token(ID);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(32);
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      blockStatement();
      break;
    case 33:
      ifStatement();
      break;
    case 35:
      whileStatement();
      break;
    case MINUS:
    case NEGATION:
    case ID:
    case INT:
    case BOOL:
    case STRING:
    case 30:
    case 37:
    case 40:
    case 41:
    case 42:
      assignmentStatement();
      break;
      expressionStatement();
      break;
    case 38:
      returnStatement();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void blockStatement() throws ParseException {
    jj_consume_token(26);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NEGATION:
      case ID:
      case INT:
      case BOOL:
      case STRING:
      case 26:
      case 30:
      case 33:
      case 35:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      statement();
    }
    jj_consume_token(27);
  }

  static final public void ifStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      jj_consume_token(30);
      expression();
      jj_consume_token(32);
      blockStatement();
      break;
      jj_consume_token(33);
      jj_consume_token(30);
      expression();
      jj_consume_token(32);
      blockStatement();
      jj_consume_token(34);
      blockStatement();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void whileStatement() throws ParseException {
    jj_consume_token(35);
    jj_consume_token(30);
    expression();
    jj_consume_token(32);
    blockStatement();
  }

  static final public void assignmentStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NEGATION:
    case ID:
    case INT:
    case BOOL:
    case STRING:
    case 30:
    case 40:
    case 41:
    case 42:
      expression();
      jj_consume_token(36);
      expression();
      jj_consume_token(28);
      break;
    case 37:
      jj_consume_token(37);
      jj_consume_token(ID);
      jj_consume_token(36);
      expression();
      jj_consume_token(28);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expressionStatement() throws ParseException {
    expression();
    jj_consume_token(28);
  }

  static final public void returnStatement() throws ParseException {
    jj_consume_token(38);
    expression();
    jj_consume_token(28);
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NEGATION:
    case ID:
    case INT:
    case BOOL:
    case STRING:
    case 30:
    case 40:
    case 41:
    case 42:
      application();
      break;
      memberSelection();
      break;
      atomicExpression();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void application() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NEGATION:
      unaryOperator();
      expression();
      application_();
      break;
    case ID:
    case INT:
    case BOOL:
    case STRING:
    case 30:
    case 40:
    case 41:
    case 42:
      atomicExpression();
      jj_consume_token(39);
      jj_consume_token(ID);
      memberSelection_();
      binaryOperator();
      expression();
      application_();
      break;
      atomicExpression();
      binaryOperator();
      expression();
      application_();
      break;
      atomicExpression();
      jj_consume_token(39);
      jj_consume_token(ID);
      memberSelection_();
      jj_consume_token(39);
      jj_consume_token(ID);
      argumentList();
      application_();
      break;
      atomicExpression();
      jj_consume_token(39);
      jj_consume_token(ID);
      argumentList();
      application_();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void application_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case PLUS:
    case MULTIPLY:
    case DIVIDE:
    case REMAINDER:
    case EQUAL:
    case NOTEQUAL:
    case LESS_THAN_EQUAL:
    case GREATER_THAN_EQUAL:
    case LESS_THAN:
    case GREATER_THAN:
    case AND:
    case OR:
      binaryOperator();
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
      case EQUAL:
      case NOTEQUAL:
      case LESS_THAN_EQUAL:
      case GREATER_THAN_EQUAL:
      case LESS_THAN:
      case GREATER_THAN:
      case AND:
      case OR:
      case 39:
        application_();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    case 39:
      jj_consume_token(39);
      jj_consume_token(ID);
      argumentList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
      case EQUAL:
      case NOTEQUAL:
      case LESS_THAN_EQUAL:
      case GREATER_THAN_EQUAL:
      case LESS_THAN:
      case GREATER_THAN:
      case AND:
      case OR:
      case 39:
        application_();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
      jj_consume_token(39);
      jj_consume_token(ID);
      memberSelection_();
      jj_consume_token(39);
      jj_consume_token(ID);
      argumentList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
      case EQUAL:
      case NOTEQUAL:
      case LESS_THAN_EQUAL:
      case GREATER_THAN_EQUAL:
      case LESS_THAN:
      case GREATER_THAN:
      case AND:
      case OR:
      case 39:
        application_();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      jj_consume_token(39);
      jj_consume_token(ID);
      memberSelection_();
      binaryOperator();
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
      case EQUAL:
      case NOTEQUAL:
      case LESS_THAN_EQUAL:
      case GREATER_THAN_EQUAL:
      case LESS_THAN:
      case GREATER_THAN:
      case AND:
      case OR:
      case 39:
        application_();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case NEGATION:
      jj_consume_token(NEGATION);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void binaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case REMAINDER:
      jj_consume_token(REMAINDER);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    case LESS_THAN_EQUAL:
      jj_consume_token(LESS_THAN_EQUAL);
      break;
    case GREATER_THAN_EQUAL:
      jj_consume_token(GREATER_THAN_EQUAL);
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void argumentList() throws ParseException {
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NEGATION:
    case ID:
    case INT:
    case BOOL:
    case STRING:
    case 30:
    case 40:
    case 41:
    case 42:
      expression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        jj_consume_token(31);
        expression();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(32);
  }

  static final public void memberSelection() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NEGATION:
    case ID:
    case INT:
    case BOOL:
    case STRING:
    case 30:
    case 40:
    case 41:
    case 42:
      application();
      jj_consume_token(39);
      jj_consume_token(ID);
      memberSelection_();
      break;
      atomicExpression();
      jj_consume_token(39);
      jj_consume_token(ID);
      memberSelection_();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void memberSelection_() throws ParseException {
    jj_consume_token(39);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      memberSelection_();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void atomicExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case 40:
      jj_consume_token(40);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case 41:
      nullExpression();
      break;
    case 42:
      newExpression();
      break;
      jj_consume_token(ID);
      argumentList();
      break;
    case 30:
      jj_consume_token(30);
      expression();
      jj_consume_token(32);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nullExpression() throws ParseException {
    jj_consume_token(41);
    jj_consume_token(30);
    type();
    jj_consume_token(32);
  }

  static final public void newExpression() throws ParseException {
    jj_consume_token(42);
    jj_consume_token(30);
    type();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(32);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MINIGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x200000,0x20000000,0x80000000,0x200000,0x45e00060,0x45e00060,0x0,0x41e00060,0x41e00060,0x41e00060,0x7ffa0,0x7ffa0,0x7ffa0,0x7ffa0,0x7ffa0,0x60,0x7ffa0,0x80000000,0x41e00060,0x41e00060,0x0,0x41e00000,0x80000000,0x600000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x76a,0x76a,0x2,0x720,0x700,0x700,0x80,0x80,0x80,0x80,0x80,0x0,0x0,0x0,0x700,0x700,0x80,0x700,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MINIGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MINIGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MINIGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MINIGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MINIGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MINIGrammar(MINIGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MINIGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
